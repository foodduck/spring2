<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="boardMapper">
	<!-- 검색과 관련된 부분의 parameterType(전달값)은 SearchCriteria 클래스로 -->
	<!-- 검색과 관련되지 않은 부분은 parameterType(전달값)은 BoardVO 클래스로 -->
	<!-- 목록 조회 -->
	<select id="boardList" resultType="kr.co.vo.BoardVO" parameterType="kr.co.vo.SearchCriteria">
		select bno, title, content, writer, regdate, hit from 
		(select bno, title, content, writer, regdate, hit, row_number() over(order by bno desc) 
		as rnum from mp_board where 1=1 
		<include refid="search"></include>
		) MP where rnum between #{rowStart} and #{rowEnd} order by bno desc
	</select>
	<!-- 해당 글 조회 -->
		<select id="boardRead" resultType="kr.co.vo.BoardVO" parameterType="int">
		select bno, title, content, writer, regdate  from mp_board where bno = #{bno}
	</select>
	<!-- 페이지내이션을 만들기 위한 글의 수 카운트 -->
	<!-- 해당 검색 조건에 맞는 데이터의 건수 구하기 -->
	<select id="boardCount" resultType="int" parameterType="kr.co.vo.SearchCriteria">
		SELECT COUNT(BNO) 
		FROM MP_BOARD 
		WHERE 1=1 
		<include refid="search"></include> 
		AND BNO > 0
	</select>
	<!-- 글 등록 useGeneratedKeys:검색키 사용 유무, keyProperty:키로 사용할 컬럼명 -->
	<insert id="boardInsert" parameterType="kr.co.vo.BoardVO" useGeneratedKeys="true" keyProperty="">
		<!-- 글등록시 특정 컬럼을 키로 이용하여 시퀀스의 데이터를 불러오기 -->
		<!-- keyProperty : 키로 사용할 컬럼명, order : 하단 SQL문보다 먼저 처리할 지 유무 -->
		<selectKey keyProperty="bno" resultType="int" order="BEFORE">
			select mp_board_seq.nextval from dual
		</selectKey>
			insert into mp_board(bno, title, content, writer) values(#{bno}, #{title}, #{content}, #{writer})
	</insert>
	<!-- 글 수정 -->
		<update id="boardUpdate" parameterType="kr.co.vo.BoardVO" >
			update mp_board set title=#{title}, content=#{content} where bno=#{bno}
		</update>
	<!-- 글 삭제 -->
		<delete id="boardDelete" parameterType="int">
			delete from mp_board where bno=#{bno}
		</delete>
		
	<!-- 조회 조건 바인딩 -->
		<sql id="search">
			<if test="searchType != null">
				<if test="searchType == 't'.toString()">AND TITLE LIKE '%' || #{keyword} || '%'</if>
				<if test="searchType == 'c'.toString()">AND CONTENT LIKE '%' || #{keyword} || '%'</if>
				<if test="searchType == 'w'.toString()">AND WRITER LIKE '%' || #{keyword} || '%'</if>
				<if test="searchType == 'tc'.toString()">AND (TITLE LIKE '%' || #{keyword} || '%') 
				or (CONTENT LIKE '%' || #{keyword} || '%'</if>
			</if>
		</sql>

	<!-- 첨부파일 추가(업로드), 테이블에서 2개 이상의 값을 가져올때 hashMap -->
		<insert id="fileInsert" parameterType="hashMap">
			insert into mp_file(file_no, BNO, org_file_name, stored_file_name, file_size) 
			values (mp_file_seq.nextval, #{BNO}, #{org_file_name}, #{STORED_FILE_NAME}, #{FILE_SIZE})
		</insert>
	
	<!-- 첨부파일 조회 round(x, y): x를 소수 y번째까지 표시하면서 y+1번째 자리에서 반올림 -->
		<select id="fileRead" resultType="hashMap" parameterType="int">
			select file_no, org_file_name, round(file_size/1024, 1) as file_size, del_gb from mp_file
			where bno=#{BNO} and del_gb='n' order by file_no
		</select>
		
	<!-- 첨부파일 다운로드 -->
		<select id="fileDown" resultType="hashMap" parameterType="hashMap">
			select stored_file_name, org_file_name from mp_file where file_no = #{FILE_NO}
		</select>
	
	<!-- 첨부파일 변경 -->
		<update id="fileUpdate" parameterType="hashMap">
			update mp_file set del_gb ='Y' where file_no = #{FILE_NO}
		</update>
	
	<!-- 게시판 조회수 증가 -->
		<update id="boardHit" parameterType="int">
			UPDATE MP_BOARD SET
	    	HIT = HIT+1
	    	WHERE BNO = #{bno}
		</update>
		
</mapper>